@{
    ViewBag.Title = "AddressRadiusSearch";
    Layout = "~/Views/Shared/_LayoutLobster.cshtml";
}


<div class="margin-top-15px" data-ng-controller="addressRadiusController as addy" id="addressRadiusElement">
    <div class="col-lg-12 ">
        <div class="col-lg-4" id="panelLocations">
            <div data-ng-repeat="location in addy.items">
                <a data-ng-href="{{addy.setUrl(location.id,location.userType)}}" ng-mousedown="openTab()" class=" mapresulttemplate">
                    <div class="col-md-12">
                        <div class="col-xs-4">
                            <img data-ng-src="https://encrypted-tbn2.gstatic.com/images?q=tbn:ANd9GcQSGCSfExix08Tdd6teS1C2JCNLGtbmfqrzHxNjGBbeoOg21asH" class="smallResize no-margin no-padding" />
                        </div>
                        <div class="col-xs-8">
                            <h4>{{location.firstName}} {{location.lastName}}</h4>
                            <h5>{{location.address.city}}, {{location.address.zip}}</h5>
                            <div data-ng-switch="location.userType">
                                <h5 data-ng-switch-when="1">Developer</h5>
                                <h5 data-ng-switch-when="2">Recruiter</h5>
                                <h5 data-ng-switch-when="3">Employer</h5>
                            </div>
                        </div>
                    </div>
                </a>
            </div>
        </div>
        <div class="col-lg-8">
            <form class="form-inline" id="addressForm">
                <div class="col-lg-12">
                    <div class="form-group">
                        <label for="zipAddress" class="control-label">Zip</label>
                        <input class="form-control" type="text" name="zipAddress" id="zipAddress" placeholder="Enter your zip code" data-ng-model="addy.item.zip" data-ng-minlength="5" data-ng-maxlength="10" required>
                        <div data-ng-show="addressForm.$submitted || addressForm.zipAddress$touched">
                            <div data-ng-show="addressForm.zipAddress.$error.required">This field is required.</div>
                            <div data-ng-show="form.description.$error.minlength">Description should be at least 5 characters.</div>
                            <div data-ng-show="form.description.$error.maxlength">Description should be no more than 10 characters.</div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="distance" class="control-label">Distance(Miles)</label>
                        <input class="form-control" type="text" name="distance" id="distance" placeholder="Distance to search" data-ng-model="addy.item.distance" required>
                        <div data-ng-show="addressForm.$submitted || addressForm.zip.$touched">
                            <div data-ng-show="addressForm.distance.$error.required">This field is required.</div>
                        </div>
                    </div>
                    <button class="btn-success" id="submitAddrBtn" type="submit" data-ng-click="addy.submit()">Search</button>
                </div>
                <div class="col-lg-12">
                    <div class="latlong hidden">
                        <label class="control-label">Latitude</label>
                        <input id="lat" name="lat" type="text" value="39.5" data-ng-model="addy.item.lat" />
                    </div>
                    <div class="latlong hidden">
                        <label class="control-label">Longitude</label>
                        <input id="lng" name="lng" type="text" value="-98.35" data-ng-model="addy.item.lng" />
                    </div>
                </div>
            </form>
            <div class="col-lg-12 margin-top-15px">
                <div id="map" class="table-bordered">
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts{
    <script type="text/javascript">

        sabio.page.addressRadiusController = null;
        sabio.page.map = null;
        sabio.page.latlng = null;

        sabio.page.startUp = function () {
            sabio.page.addressRadiusController = sabio.ng.getControllerInstance($('#addressRadiusElement'));
        }

        sabio.services.address.factory = function ($baseService) {
            var service = sabio.services.address;
            var newService = $.extend(true, {}, service, $baseService);
            return newService;
        }

        sabio.page.addressRadiusControllerFactory = function ($scope, $baseController, addressRadiusService) {
            var viewModel = this;
            viewModel.items = null;
            viewModel.addressRadiusService = addressRadiusService;
            viewModel.submit = _submit;
            viewModel.submitData = _submitData;
            viewModel.receivedItems = _onGetSuccess;
            viewModel.onResultError = _onError;
            viewModel.createMarkers = _createMarkers;
            viewModel.setUrl = _setUrl;
            viewModel.clone = _getClone;
            $.extend(viewModel, $baseController);

            viewModel.notify = viewModel.addressRadiusService.getNotifier($scope);

            render();

            function render() {
                sabio.page.loadGoogleMaps(39.5, -98.35, 4, false);
            }

            function _submit() {
                sabio.page.getCoor();
            }

            function _submitData() {
                var data = viewModel.item;
                viewModel.addressRadiusService.getAddressRadius(viewModel.item.lat, viewModel.item.lng, viewModel.item.distance, viewModel.receivedItems, viewModel.onResultError);
            }

            function _onGetSuccess(result) {
                viewModel.notify(function () {
                    viewModel.items = result.items;
                    viewModel.createMarkers(viewModel.items);
                });
            }

            function _createMarkers(data) {
                var distance = 0;
                for (i = 0; i < data.length; i++) {
                    var myLatlng = new google.maps.LatLng(parseFloat(data[i].address.lat), parseFloat(data[i].address.lng));
                    var marker = new google.maps.Marker(
                            {
                                map: sabio.page.map,
                                position: myLatlng,
                                title: data[i].firstName + " " + data[i].lastName + "\n" + data[i].email + "\n" + data[i].address.city + ", " + data[i].address.zip + "\n Distance " + Math.round(data[i].address.distance * 10) / 10 + " Miles",
                                url: viewModel.setUrl(data[i].id, data[i].userType)
                            });
                    google.maps.event.addListener(marker, 'click', function () {
                        window.open(this.url, '_blank');
                    });
                    distance=data[i].address.distance;
                }
                sabio.page.map.setZoom(sabio.page.radiusToZoom(distance));
            }

            function _getClone() {
                return $('#mapResultTemplate');
            }

            function _setUrl(id,userType) {
                var url = "/profile/"
                switch (userType) {
                    case 1:
                        return url + "developer/" + id;
                        break;
                    case 2:
                        return url + "recruiter/" + id;
                        break;
                    case 3:
                        return url + "employer/" + id;
                        break;
                    default:
                        break;
                }
            }

            function _onError(jqXhr, error) {
            }
        }

        sabio.ng.addService(sabio.ng.app.module, "addressRadiusService", ['$baseService'], sabio.services.address.factory);

        sabio.ng.addController(sabio.ng.app.module, "addressRadiusController", ['$scope', '$baseController', 'addressRadiusService'], sabio.page.addressRadiusControllerFactory);

        sabio.page.loadGoogleMaps = function (lat, lng, zoom, exist) {
            sabio.page.latlng = new google.maps.LatLng(parseFloat(lat), parseFloat(lng));
            var mapOptions = {
                center: sabio.page.latlng,
                zoom: parseInt(zoom)
            };
            sabio.page.map = new google.maps.Map(document.getElementById('map'), mapOptions);
            if (exist == true) {
                var marker = new google.maps.Marker({
                    map: sabio.page.map,
                    position: sabio.page.latlng
                });
            }
        }

        sabio.page.radiusToZoom = function(radius){
            return Math.round(14-Math.log(radius)/Math.LN2);
        }

        sabio.page.getCoor = function () {
            var address = $('#zipAddress').val();
            var coor = new google.maps.Geocoder();
            coor.geocode({ address: address }, function (results, status) {
                if (status == google.maps.GeocoderStatus.OK) {
                    var cntl = sabio.ng.getControllerInstance($('#addressRadiusElement'));
                    cntl.notify(function () {
                        cntl.item.lat = results[0].geometry.location.lat();
                        cntl.item.lng = results[0].geometry.location.lng();
                        sabio.page.latlng = new google.maps.LatLng(cntl.item.lat, cntl.item.lng);
                    });
                    sabio.page.map.setCenter(results[0].geometry.location);//center the map over the result
                    cntl.submitData();
                    if (results[0].geometry.viewport)
                        sabio.page.map.fitBounds(results[0].geometry.viewport);
                } else {
                    alert('Geocode was not successful for the following reason: ' + status);
                }
            });
        }

    </script>
}
